image: node:18-alpine

stages:
  - build
  - test
  - publish
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        IMAGE_TAG: "dev"
        REMOTE_URL: "168.119.189.177"
        API_URL: "https://ccd-api.initdevelopment.com"
        DIRECTUS_URL: "https://hotpot-directus.initdevelopment.com"
        DIRECTUS_TOKEN: "oGnFt9LogzdrBmueNZm_VNffgj3ZLrm2"
    - if: '$CI_COMMIT_BRANCH == "poc"'
      variables:
        IMAGE_TAG: "poc"
        REMOTE_URL: "157.90.151.18"
        API_URL: "https://poc-ccd-api.initdevelopment.com"
        DIRECTUS_URL: "https://hotpot-directus.initdevelopment.com"
        DIRECTUS_TOKEN: "oGnFt9LogzdrBmueNZm_VNffgj3ZLrm2"
    - if: '$CI_COMMIT_TAG == "ukraine"'
      variables:
        IMAGE_TAG: "ukraine"
        REMOTE_URL: "49.13.8.195"
        API_URL: "https://ua-ccd-api.initdevelopment.com"
        DIRECTUS_URL: "https://hotpot-directus.initdevelopment.com"
        DIRECTUS_TOKEN: "oGnFt9LogzdrBmueNZm_VNffgj3ZLrm2"
    - if: '$CI_COMMIT_TAG == "south-sudan"'
      variables:
        IMAGE_TAG: "south-sudan"
        REMOTE_URL: "162.55.47.222"
        API_URL: "https://ss-ccd-api.initdevelopment.com"
        DIRECTUS_URL: "https://hotpot-directus.initdevelopment.com"
        DIRECTUS_TOKEN: "oGnFt9LogzdrBmueNZm_VNffgj3ZLrm2"
    - if: '$CI_COMMIT_TAG == "pentest"'
      variables:
        IMAGE_TAG: "pentest"
        REMOTE_URL: "159.69.123.93"
        API_URL: "https://pentest-ccd-api.initdevelopment.com"
        DIRECTUS_URL: "https://hotpot-directus.initdevelopment.com"
        DIRECTUS_TOKEN: "oGnFt9LogzdrBmueNZm_VNffgj3ZLrm2"
    - if: '$CI_COMMIT_TAG == "urc"'
      variables:
        IMAGE_TAG: "urc"
        REMOTE_URL: "4.233.139.197"
        API_URL: "https://api.urcportal.org"
        DIRECTUS_URL: "https://hotpot-directus.initdevelopment.com"
        DIRECTUS_TOKEN: "oGnFt9LogzdrBmueNZm_VNffgj3ZLrm2"
    - when: always

build-client:
  stage: build
  before_script:
    - apk update
    - apk add yarn
  script:
    - echo "Building CCD client"
    - cd client
    - yarn
    - echo VITE_API_URL=$API_URL > .env
    - echo VITE_DIRECTUS_URL=$DIRECTUS_URL >> .env
    - echo VITE_DIRECTUS_TOKEN=$DIRECTUS_TOKEN >> .env
    - yarn build
    - mv dist ../client-build
    - echo "Build successful"
  artifacts:
    expire_in: 1 hour
    name: client-build
    paths:
      - client-build

build-server:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0-alpine
  before_script:
    - apk update
    - apk add nodejs npm
  script:
    - echo "Building CCD server"
    - cd server
    - npm install
    - npm run build
    - mv Ccd.Server/build ../server-build
    - echo "Build successful"
  artifacts:
    expire_in: 1 hour
    name: server-build
    paths:
      - server-build

test-server:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0-alpine
  services:
    - name: postgres
      alias: ccd-server
  variables:
    POSTGRES_DB: ccd-server
    POSTGRES_USER: ccd-server
    POSTGRES_PASSWORD: test123
  before_script:
    - apk update
    - apk add nodejs npm
  script:
    - echo "Running CCD server tests"
    - cd server
    - rm Ccd.Tests/appsettings.json
    - rm Ccd.Server/appsettings.json
    - cp Ccd.Tests/appsettings.ci.json Ccd.Tests/appsettings.json
    - cp Ccd.Tests/appsettings.ci.json Ccd.Server/appsettings.json
    - npm run test
    - echo "Tests successful"

publish-client:
  stage: publish
  only:
    - develop
    - poc
    - tags
  services:
    - docker:26.1.4-dind
  before_script:
    - apk update
    - apk add docker
  script:
    - echo "Publishing client (ID $CI_PIPELINE_ID)"
    - cp client/deployment/Dockerfile client-build
    - cp client/deployment/nginx.conf client-build
    - cd client-build
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --load -t $CI_REGISTRY/init/ccd-data-portal/image:client-$IMAGE_TAG .
    - docker push $CI_REGISTRY/init/ccd-data-portal/image:client-$IMAGE_TAG
    - echo "Publishing complete"

publish-server:
  stage: publish
  only:
    - develop
    - poc
    - tags
  services:
    - docker:26.1.4-dind
  before_script:
    - apk update
    - apk add docker
  script:
    - echo "Publishing client (ID $CI_PIPELINE_ID)"
    - cp server/deployment/Dockerfile server-build
    - cd server-build
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --load -t $CI_REGISTRY/init/ccd-data-portal/image:server-$IMAGE_TAG .
    - docker push $CI_REGISTRY/init/ccd-data-portal/image:server-$IMAGE_TAG
    - echo "Publishing complete"

deploy:
  stage: deploy
  only:
    - develop
    - poc
    - tags
  before_script:
    - apk update
    - apk add openssh rsync bash
    - mkdir /root/.ssh
    - touch /root/.ssh/id_rsa
    - echo -e $SSH_KEY | awk '{gsub("\\\\n","\n")};1' >> /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/id_rsa
  script:
    - echo "Deploying app (ID $CI_PIPELINE_ID)"
    - ssh -o StrictHostKeyChecking=no ubuntu@$REMOTE_URL /home/ubuntu/run-services.sh
    - echo "Deployment complete"
