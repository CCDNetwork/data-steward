// <auto-generated />
using System;
using System.Collections.Generic;
using Ccd.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ccd.Server.Migrations
{
    [DbContext(typeof(CcdContext))]
    [Migration("20240527081657_AddReferralsFileIds")]
    partial class AddReferralsFileIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ccd.Server.Beneficiaries.Beneficary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .HasColumnType("text")
                        .HasColumnName("activity");

                    b.Property<string>("AssistanceDetails")
                        .HasColumnType("text")
                        .HasColumnName("assistance_details");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text")
                        .HasColumnName("community_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("CurrencyAmount")
                        .HasColumnType("text")
                        .HasColumnName("currency_amount");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EndDate")
                        .HasColumnType("text")
                        .HasColumnName("end_date");

                    b.Property<string>("FamilyName")
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Frequency")
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("GovIdNumber")
                        .HasColumnType("text")
                        .HasColumnName("gov_id_number");

                    b.Property<string>("GovIdType")
                        .HasColumnType("text")
                        .HasColumnName("gov_id_type");

                    b.Property<string>("HhId")
                        .HasColumnType("text")
                        .HasColumnName("hh_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid")
                        .HasColumnName("list_id");

                    b.Property<string>("MobilePhoneId")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("OtherIdNumber")
                        .HasColumnType("text")
                        .HasColumnName("other_id_number");

                    b.Property<string>("OtherIdType")
                        .HasColumnType("text")
                        .HasColumnName("other_id_type");

                    b.Property<string>("StartDate")
                        .HasColumnType("text")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_beneficary");

                    b.HasIndex("ListId")
                        .HasDatabaseName("ix_beneficary_list_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_beneficary_organization_id");

                    b.ToTable("beneficary");
                });

            modelBuilder.Entity("Ccd.Server.BeneficiaryAttributes.BaBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BeneficiaryAttributeGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("beneficiary_attribute_group_id");

                    b.Property<int>("BeneficiaryAttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("beneficiary_attribute_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_ba_bag");

                    b.HasIndex("BeneficiaryAttributeGroupId")
                        .HasDatabaseName("ix_ba_bag_beneficiary_attribute_group_id");

                    b.HasIndex("BeneficiaryAttributeId")
                        .HasDatabaseName("ix_ba_bag_beneficiary_attribute_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_ba_bag_organization_id");

                    b.ToTable("ba_bag");
                });

            modelBuilder.Entity("Ccd.Server.BeneficiaryAttributes.BeneficiaryAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeName")
                        .HasColumnType("text")
                        .HasColumnName("attribute_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<bool>("UsedForDeduplication")
                        .HasColumnType("boolean")
                        .HasColumnName("used_for_deduplication");

                    b.HasKey("Id")
                        .HasName("pk_beneficiary_attribute");

                    b.ToTable("beneficiary_attribute");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeName = "FirstName",
                            Name = "First Name",
                            Type = "string",
                            UsedForDeduplication = true
                        },
                        new
                        {
                            Id = 2,
                            AttributeName = "FamilyName",
                            Name = "Family Name",
                            Type = "string",
                            UsedForDeduplication = true
                        },
                        new
                        {
                            Id = 3,
                            AttributeName = "Gender",
                            Name = "Gender",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 4,
                            AttributeName = "DateOfBirth",
                            Name = "Date of Birth",
                            Type = "DateTime",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 5,
                            AttributeName = "HhId",
                            Name = "HH ID",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 6,
                            AttributeName = "MobilePhoneId",
                            Name = "Mobile Phone ID",
                            Type = "int",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 7,
                            AttributeName = "GovIdType",
                            Name = "Gov ID Type",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 8,
                            AttributeName = "GovIdNumber",
                            Name = "Gov ID Number",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 9,
                            AttributeName = "OtherIdType",
                            Name = "Other ID Type",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 10,
                            AttributeName = "OtherIdNumber",
                            Name = "Other ID Number",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 11,
                            AttributeName = "AssistanceDetails",
                            Name = "Assistance Details",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 12,
                            AttributeName = "Activity",
                            Name = "Activity",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 13,
                            AttributeName = "Currency",
                            Name = "Currency",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 14,
                            AttributeName = "CurrencyAmount",
                            Name = "Currency Amount",
                            Type = "int",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 15,
                            AttributeName = "StartDate",
                            Name = "Start Date",
                            Type = "DateTime",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 16,
                            AttributeName = "EndDate",
                            Name = "End Date",
                            Type = "DateTime",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 17,
                            AttributeName = "Frequency",
                            Name = "Frequency",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 18,
                            AttributeName = "AdminLevel1",
                            Name = "AdminLevel1",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 19,
                            AttributeName = "AdminLevel2",
                            Name = "AdminLevel2",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 20,
                            AttributeName = "AdminLevel3",
                            Name = "AdminLevel3",
                            Type = "string",
                            UsedForDeduplication = false
                        },
                        new
                        {
                            Id = 21,
                            AttributeName = "AdminLevel4",
                            Name = "AdminLevel4",
                            Type = "string",
                            UsedForDeduplication = false
                        });
                });

            modelBuilder.Entity("Ccd.Server.BeneficiaryAttributes.BeneficiaryAttributeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<bool>("UseFuzzyMatch")
                        .HasColumnType("boolean")
                        .HasColumnName("use_fuzzy_match");

                    b.HasKey("Id")
                        .HasName("pk_beneficiary_attribute_group");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_beneficiary_attribute_group_organization_id");

                    b.ToTable("beneficiary_attribute_group");
                });

            modelBuilder.Entity("Ccd.Server.Deduplication.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("Duplicates")
                        .HasColumnType("integer")
                        .HasColumnName("duplicates");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.HasKey("Id")
                        .HasName("pk_list");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_list_organization_id");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_list_user_created_id");

                    b.ToTable("list");
                });

            modelBuilder.Entity("Ccd.Server.Handbooks.Handbook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_handbook");

                    b.ToTable("handbook");
                });

            modelBuilder.Entity("Ccd.Server.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_organization");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("Ccd.Server.Referrals.Referral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<List<Guid>>("FileIds")
                        .HasColumnType("jsonb")
                        .HasColumnName("file_ids");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<Guid>("OrganizationCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_created_id");

                    b.Property<Guid>("OrganizationReferredToId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_referred_to_id");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.Property<Guid>("UserUpdatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_updated_id");

                    b.HasKey("Id")
                        .HasName("pk_referral");

                    b.HasIndex("OrganizationCreatedId")
                        .HasDatabaseName("ix_referral_organization_created_id");

                    b.HasIndex("OrganizationReferredToId")
                        .HasDatabaseName("ix_referral_organization_referred_to_id");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_referral_user_created_id");

                    b.HasIndex("UserUpdatedId")
                        .HasDatabaseName("ix_referral_user_updated_id");

                    b.ToTable("referral");
                });

            modelBuilder.Entity("Ccd.Server.Storage.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("StorageTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("storage_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.Property<Guid>("UserUpdatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_updated_id");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_file_owner_id");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_file_user_created_id");

                    b.HasIndex("UserUpdatedId")
                        .HasDatabaseName("ix_file_user_updated_id");

                    b.ToTable("file");
                });

            modelBuilder.Entity("Ccd.Server.Templates.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .HasColumnType("text")
                        .HasColumnName("activity");

                    b.Property<string>("AdminLevel1")
                        .HasColumnType("text")
                        .HasColumnName("admin_level1");

                    b.Property<string>("AdminLevel2")
                        .HasColumnType("text")
                        .HasColumnName("admin_level2");

                    b.Property<string>("AdminLevel3")
                        .HasColumnType("text")
                        .HasColumnName("admin_level3");

                    b.Property<string>("AdminLevel4")
                        .HasColumnType("text")
                        .HasColumnName("admin_level4");

                    b.Property<string>("AssistanceDetails")
                        .HasColumnType("text")
                        .HasColumnName("assistance_details");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("CurrencyAmount")
                        .HasColumnType("text")
                        .HasColumnName("currency_amount");

                    b.Property<string>("DateofBirth")
                        .HasColumnType("text")
                        .HasColumnName("dateof_birth");

                    b.Property<string>("EndDate")
                        .HasColumnType("text")
                        .HasColumnName("end_date");

                    b.Property<string>("FamilyName")
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Frequency")
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("GovIDNumber")
                        .HasColumnType("text")
                        .HasColumnName("gov_idnumber");

                    b.Property<string>("GovIDType")
                        .HasColumnType("text")
                        .HasColumnName("gov_idtype");

                    b.Property<string>("HHID")
                        .HasColumnType("text")
                        .HasColumnName("hhid");

                    b.Property<string>("MobilePhoneID")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("OtherIDNumber")
                        .HasColumnType("text")
                        .HasColumnName("other_idnumber");

                    b.Property<string>("OtherIDType")
                        .HasColumnType("text")
                        .HasColumnName("other_idtype");

                    b.Property<string>("StartDate")
                        .HasColumnType("text")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.Property<Guid>("UserUpdatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_updated_id");

                    b.HasKey("Id")
                        .HasName("pk_template");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_template_organization_id");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_template_user_created_id");

                    b.HasIndex("UserUpdatedId")
                        .HasDatabaseName("ix_template_user_updated_id");

                    b.ToTable("template");
                });

            modelBuilder.Entity("Ccd.Server.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activated_at");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("text")
                        .HasColumnName("activation_code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_code");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Ccd.Server.Users.UserOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_organization");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_user_organization_organization_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_organization_user_id");

                    b.ToTable("user_organization");
                });

            modelBuilder.Entity("Ccd.Server.Beneficiaries.Beneficary", b =>
                {
                    b.HasOne("Ccd.Server.Deduplication.List", "List")
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_beneficary_list_list_id");

                    b.HasOne("Ccd.Server.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_beneficary_organization_organization_id");

                    b.Navigation("List");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ccd.Server.BeneficiaryAttributes.BaBag", b =>
                {
                    b.HasOne("Ccd.Server.BeneficiaryAttributes.BeneficiaryAttributeGroup", "BeneficiaryAttributeGroup")
                        .WithMany()
                        .HasForeignKey("BeneficiaryAttributeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ba_bag_beneficiary_attribute_group_beneficiary_attribute_gr~");

                    b.HasOne("Ccd.Server.BeneficiaryAttributes.BeneficiaryAttribute", "BeneficiaryAttribute")
                        .WithMany()
                        .HasForeignKey("BeneficiaryAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ba_bag_beneficiary_attribute_beneficiary_attribute_id");

                    b.HasOne("Ccd.Server.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ba_bag_organization_organization_id");

                    b.Navigation("BeneficiaryAttribute");

                    b.Navigation("BeneficiaryAttributeGroup");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ccd.Server.BeneficiaryAttributes.BeneficiaryAttributeGroup", b =>
                {
                    b.HasOne("Ccd.Server.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_beneficiary_attribute_group_organization_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ccd.Server.Deduplication.List", b =>
                {
                    b.HasOne("Ccd.Server.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_list_organization_organization_id");

                    b.HasOne("Ccd.Server.Users.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .HasConstraintName("fk_list_user_user_created_id");

                    b.Navigation("Organization");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("Ccd.Server.Referrals.Referral", b =>
                {
                    b.HasOne("Ccd.Server.Organizations.Organization", "OrganizationCreated")
                        .WithMany()
                        .HasForeignKey("OrganizationCreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_referral_organization_organization_created_id");

                    b.HasOne("Ccd.Server.Organizations.Organization", "OrganizationReferredTo")
                        .WithMany()
                        .HasForeignKey("OrganizationReferredToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_referral_organization_organization_referred_to_id");

                    b.HasOne("Ccd.Server.Users.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_referral_user_user_created_id");

                    b.HasOne("Ccd.Server.Users.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_referral_user_user_updated_id");

                    b.Navigation("OrganizationCreated");

                    b.Navigation("OrganizationReferredTo");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("Ccd.Server.Storage.File", b =>
                {
                    b.HasOne("Ccd.Server.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_file_user_owner_id");

                    b.HasOne("Ccd.Server.Users.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_file_user_user_created_id");

                    b.HasOne("Ccd.Server.Users.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_file_user_user_updated_id");

                    b.Navigation("Owner");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("Ccd.Server.Templates.Template", b =>
                {
                    b.HasOne("Ccd.Server.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_template_organization_organization_id");

                    b.HasOne("Ccd.Server.Users.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_template_user_user_created_id");

                    b.HasOne("Ccd.Server.Users.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_template_user_user_updated_id");

                    b.Navigation("Organization");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("Ccd.Server.Users.UserOrganization", b =>
                {
                    b.HasOne("Ccd.Server.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_organization_organization_organization_id");

                    b.HasOne("Ccd.Server.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_organization_user_user_id");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
